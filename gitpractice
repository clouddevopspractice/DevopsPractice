---
# To create repositories in git there are two types of repos
# one  is bare repo and another is non bare repos , bare repos are central repos which will be only for storing and sharing data.
# In Non-bare repos we can edit and upload data and also can share data b/w users.

git init --bare   --> This creates central repo
git init -- > Creates only local repo
git clone https://github.com/repository.git workspacename  --> this will clone the workspace from central to local repository.

git add . or git add filename git add foldername ( folders will get add only when it is not empty).

git status (provides status of the workspace), git log (shows the log information with complete commit details) , git log --oneline( displays 7 letters of the commitid) 

git log --oneline --grep "Files" ( To filter the message based on commit details)

# To ignore files for commit or to staging
.gitignore

# Branching  -- > To get or two work on 2 similar modueles in a project we can using branching

git branch newbranchname (To create a new branch) , git checkout branchname ( To switch to the branch name that mentioned)

<<<<<<< Updated upstream
<<<<<<< Updated upstream
  Output :
          base) [root@oc6310106358 GIT]# git status
	# On branch master
	# Changes not staged for commit:
	#   (use "git add <file>..." to update what will be committed)
	#   (use "git checkout -- <file>..." to discard changes in working directory)
	#
	#	modified:   gitpractice
	#
	no changes added to commit (use "git add" and/or "git commit -a")
	(base) [root@oc6310106358 GIT]# git add .
	(base) [root@oc6310106358 GIT]# git stash
	Saved working directory and index state WIP on master: 4bad82f Merge branch 'childbranch'
	HEAD is now at 4bad82f Merge branch 'childbranch'
	(base) [root@oc6310106358 GIT]# git branch
	  childbranch
	* master
	(base) [root@oc6310106358 GIT]# git status
	# On branch master
	nothing to commit, working directory clean
	(base) [root@oc6310106358 GIT]# vi gitpractice 

=======
Git cherry-pick commitid: this has to be executed at destination level. -- > To synch the commit id in childbranch to master , we need to switch to master and then execute this git cherry-pick commitid
>>>>>>> Stashed changes
=======
# Git stash takes back up of files on the recent workdir workspace
>>>>>>> Stashed changes

# To merge entiry branches then we need to use as git merge childbranch master --> This will merge all changes in child to master branch

# Stashing Files in workspace commands

git stash list , git stash , git stash clear , git stash apply stash@{0} etc. are the commands and it should apply only under working dir not after adding files to staging.


# Git Reverting changes

 
